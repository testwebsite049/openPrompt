import React, { useState, useCallback } from 'react';
import { 
  X, 
  Copy, 
  Check, 
  Twitter, 
  Facebook, 
  Linkedin, 
  Mail, 
  MessageCircle,
  ExternalLink,
  Download,
  QrCode
} from 'lucide-react';
import { Prompt } from '../hooks/usePrompts';
import { cn } from '../utils/cn';

interface ShareModalProps {
  prompt: Prompt;
  isOpen: boolean;
  onClose: () => void;
  onShare: (shareType: string) => Promise<any>;
}

const ShareModal: React.FC<ShareModalProps> = ({ 
  prompt, 
  isOpen, 
  onClose, 
  onShare 
}) => {
  const [copiedType, setCopiedType] = useState<string | null>(null);
  const [loading, setLoading] = useState<string | null>(null);

  const handleShare = useCallback(async (shareType: string) => {
    setLoading(shareType);
    
    try {
      const shareData = await onShare(shareType);
      
      if (shareType === 'copy') {
        const shareText = `Check out this amazing AI prompt: "${prompt.title}"

${prompt.description}

Explore more prompts at: ${window.location.origin}/explore`;
        await navigator.clipboard.writeText(shareText);
        setCopiedType(shareType);
        setTimeout(() => setCopiedType(null), 3000);
      } else if (shareType === 'copy-link') {
        const shareUrl = `${window.location.origin}/explore?prompt=${prompt._id}`;
        await navigator.clipboard.writeText(shareUrl);
        setCopiedType(shareType);
        setTimeout(() => setCopiedType(null), 3000);
      } else if (shareType === 'download-prompt') {
        // Download prompt as text file
        const element = document.createElement('a');
        const file = new Blob([
          `Title: ${prompt.title}\n\n`,
          `Description: ${prompt.description}\n\n`,
          `Tags: ${prompt.tags.join(', ')}\n\n`,
          `Category: ${typeof prompt.category === 'object' ? prompt.category.name : prompt.category}\n\n`,
          `Likes: ${prompt.likes} | Views: ${prompt.views} | Downloads: ${prompt.downloads}\n\n`,
          `Generated by openPrompt - ${window.location.origin}`
        ], { type: 'text/plain' });
        element.href = URL.createObjectURL(file);
        element.download = `${prompt.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_prompt.txt`;
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
        setCopiedType(shareType);
        setTimeout(() => setCopiedType(null), 2000);
      } else if (shareType === 'native' && navigator.share) {
        await navigator.share({
          title: prompt.title,
          text: prompt.description.substring(0, 100) + '...',
          url: `${window.location.origin}/explore?prompt=${prompt._id}`
        });
      } else if (shareData?.shareUrls?.[shareType]) {
        window.open(shareData.shareUrls[shareType], '_blank', 'width=600,height=400');
      }
    } catch (error) {
      console.error(`Error sharing via ${shareType}:`, error);
    } finally {
      setLoading(null);
    }
  }, [prompt, onShare]);

  if (!isOpen) return null;

  const shareOptions = [
    { id: 'copy-link', name: 'Copy Link', icon: ExternalLink, color: 'bg-blue-600', description: 'Copy shareable link' },
    { id: 'twitter', name: 'Twitter', icon: Twitter, color: 'bg-sky-500', description: 'Share on Twitter' },
    { id: 'facebook', name: 'Facebook', icon: Facebook, color: 'bg-blue-700', description: 'Share on Facebook' },
    { id: 'linkedin', name: 'LinkedIn', icon: Linkedin, color: 'bg-blue-800', description: 'Share on LinkedIn' },
    { id: 'whatsapp', name: 'WhatsApp', icon: MessageCircle, color: 'bg-green-600', description: 'Share via WhatsApp' },
    { id: 'email', name: 'Email', icon: Mail, color: 'bg-purple-600', description: 'Share via Email' }
  ];

  // Add native share if supported
  if (typeof navigator !== 'undefined' && 'share' in navigator) {
    shareOptions.push({
      id: 'native',
      name: 'Share',
      icon: ExternalLink,
      color: 'bg-indigo-600',
      description: 'Use device share menu'
    });
  }

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl max-w-lg w-full shadow-2xl transform transition-all duration-300 scale-100">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-100">
          <div>
            <h2 className="text-xl font-bold text-gray-900">Share Amazing Prompt</h2>
            <p className="text-sm text-gray-600 mt-1">Spread the AI creativity!</p>
          </div>
          <button 
            onClick={onClose} 
            className="p-2 rounded-full hover:bg-gray-100 transition-colors"
            title="Close"
          >
            <X className="w-5 h-5 text-gray-500" />
          </button>
        </div>

        {/* Content */}
        <div className="p-6">
          {/* Prompt Preview */}
          <div className="bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl p-4 mb-6 border border-gray-200">
            <div className="flex items-start gap-3">
              {prompt.imageUrl && (
                <img
                  src={prompt.imageUrl}
                  alt={prompt.title}
                  className="w-16 h-16 rounded-lg object-cover flex-shrink-0 shadow-sm"
                />
              )}
              <div className="flex-1 min-w-0">
                <h3 className="font-semibold text-gray-900 line-clamp-1 mb-1">
                  {prompt.title}
                </h3>
                <p className="text-gray-600 text-sm line-clamp-2 mb-2">
                  {prompt.description}
                </p>
                <div className="flex items-center gap-4 text-xs text-gray-500">
                  <span className="flex items-center gap-1">
                    ‚ù§Ô∏è {prompt.likes}
                  </span>
                  <span className="flex items-center gap-1">
                    üëÅÔ∏è {prompt.views}
                  </span>
                  <span className="flex items-center gap-1">
                    ‚¨áÔ∏è {prompt.downloads}
                  </span>
                  <span className="flex items-center gap-1">
                    üì§ {prompt.shares || 0}
                  </span>
                </div>
              </div>
            </div>
          </div>

          {/* Quick Actions */}
          <div className="grid grid-cols-2 gap-3 mb-6">
            <button
              onClick={() => handleShare('copy')}
              disabled={loading === 'copy'}
              className={cn(
                "flex items-center justify-center gap-2 p-4 rounded-xl text-white font-medium transition-all transform hover:scale-105",
                copiedType === 'copy' ? 'bg-green-600' : 'bg-gradient-to-r from-purple-600 to-blue-600 hover:shadow-lg',
                loading === 'copy' && 'opacity-50 cursor-not-allowed'
              )}
            >
              {loading === 'copy' ? (
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
              ) : copiedType === 'copy' ? (
                <Check className="w-4 h-4" />
              ) : (
                <Copy className="w-4 h-4" />
              )}
              {copiedType === 'copy' ? 'Copied!' : 'Copy Full Prompt'}
            </button>
            
            <button
              onClick={() => handleShare('download-prompt')}
              disabled={loading === 'download-prompt'}
              className={cn(
                "flex items-center justify-center gap-2 p-4 rounded-xl font-medium transition-all transform hover:scale-105",
                copiedType === 'download-prompt' ? 'bg-green-600 text-white' : 'bg-gray-600 hover:bg-gray-700 text-white'
              )}
            >
              {loading === 'download-prompt' ? (
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
              ) : copiedType === 'download-prompt' ? (
                <Check className="w-4 h-4" />
              ) : (
                <Download className="w-4 h-4" />
              )}
              {copiedType === 'download-prompt' ? 'Downloaded!' : 'Download'}
            </button>
          </div>

          {/* Share Options */}
          <div className="mb-4">
            <h3 className="font-semibold text-gray-900 mb-3 text-center">Share on social media</h3>
            <div className="grid grid-cols-3 gap-3">
              {shareOptions.map((option) => {
                const IconComponent = option.icon;
                const isCopied = copiedType === option.id;
                const isLoading = loading === option.id;
                
                return (
                  <button
                    key={option.id}
                    onClick={() => handleShare(option.id)}
                    disabled={isLoading}
                    className={cn(
                      "flex flex-col items-center gap-2 p-3 rounded-xl text-white transition-all transform hover:scale-105",
                      isCopied ? 'bg-green-600' : option.color,
                      isLoading && 'opacity-50 cursor-not-allowed'
                    )}
                    title={option.description}
                  >
                    {isLoading ? (
                      <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
                    ) : isCopied ? (
                      <Check className="w-5 h-5" />
                    ) : (
                      <IconComponent className="w-5 h-5" />
                    )}
                    <span className="text-xs font-medium">
                      {isCopied ? 'Shared!' : option.name}
                    </span>
                  </button>
                );
              })}
            </div>
          </div>

          {/* Share Stats */}
          <div className="bg-blue-50 rounded-lg p-3 text-center border border-blue-200">
            <p className="text-blue-800 text-sm">
              üí° <strong>Help others discover amazing AI prompts!</strong>
            </p>
            <p className="text-blue-600 text-xs mt-1">
              This prompt has been shared {prompt.shares || 0} times
            </p>
          </div>
        </div>

        {/* Footer */}
        <div className="px-6 py-4 bg-gray-50 border-t border-gray-100 rounded-b-2xl">
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">openPrompt.ai</span>
            <button
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700 font-medium transition-colors"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ShareModal;